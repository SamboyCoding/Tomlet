<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CommentTestInput" xml:space="preserve">
    <value>#
key1 = "value1"  #
# This is a full-line comment
key2 = "value2"  # This is a comment at the end of a line
another = "# This is not a comment"</value>
  </data>
  <data name="BasicKVPTestInput" xml:space="preserve">
    <value>key = "value"</value>
  </data>
  <data name="UnspecifiedValueTestInput" xml:space="preserve">
    <value>key = # INVALID </value>
  </data>
  <data name="MultiplePairsOnOneLineTestInput" xml:space="preserve">
    <value>first = "Tom" last = "Preston-Werner" # INVALID</value>
  </data>
  <data name="NonSimpleKeysTestInput" xml:space="preserve">
    <value>key = "value"
bare_key = "value"
bare-key = "value"
1234 = "value"</value>
  </data>
  <data name="QuotedKeysTestInput" xml:space="preserve">
    <value>"127.0.0.1" = "value"
"character encoding" = "value"
"ʎǝʞ" = "value"
'key2' = "value"
'quoted "value"' = "value"</value>
  </data>
  <data name="EmptyKeyNameTestInput" xml:space="preserve">
    <value>= "no key name"  # INVALID</value>
  </data>
  <data name="BlankKeysAreAcceptedTestInput" xml:space="preserve">
    <value>"" = "blank"     # VALID but discouraged</value>
  </data>
  <data name="EscapedDoubleQuotedStringTestInput" xml:space="preserve">
    <value>str = "I'm a string. \"You can quote me\". Name\tJos\u00E9\nLocation\tSF."</value>
  </data>
  <data name="MultiLineSimpleStringTestInput" xml:space="preserve">
    <value>str1 = """
Roses are red
Violets are blue"""</value>
  </data>
  <data name="WhitespaceRemovalTestInput" xml:space="preserve">
    <value>str1 = "The quick brown fox jumps over the lazy dog."

str2 = """
The quick brown \


  fox jumps over \
    the lazy dog."""

str3 = """\
       The quick brown \
       fox jumps over \
       the lazy dog.\
       """</value>
  </data>
  <data name="DoubleQuotesInMultilineBasicTestInput" xml:space="preserve">
    <value>str4 = """Here are two quotation marks: "". Simple enough."""
str5 = """Here are three quotation marks: ""\"."""
str6 = """Here are fifteen quotation marks: ""\"""\"""\"""\"""\"."""

# "This," she said, "is just a pointless statement."
str7 = """"This," she said, "is just a pointless statement.""""</value>
  </data>
  <data name="LiteralStringTestInput" xml:space="preserve">
    <value>winpath  = 'C:\Users\nodejs\templates'
winpath2 = '\\ServerX\admin$\system32\'
quoted   = 'Tom "Dubs" Preston-Werner'
regex    = '&lt;\i\c*\s*&gt;'
empty = ''</value>
  </data>
  <data name="MultiLineLiteralStringTestInput" xml:space="preserve">
    <value>regex2 = '''I [dw]on't need \d{2} apples'''
lines  = '''
The first newline is
trimmed in raw strings.
   All other whitespace
   is preserved.
'''</value>
  </data>
  <data name="SingleQuotesInMultilineLiteralTestInput" xml:space="preserve">
    <value>quot15 = '''Here are fifteen quotation marks: """""""""""""""'''

# apos15 = '''Here are fifteen apostrophes: ''''''''''''''''''  # INVALID
apos15 = "Here are fifteen apostrophes: '''''''''''''''"

# 'That,' she said, 'is still pointless.'
str = ''''That,' she said, 'is still pointless.''''</value>
  </data>
  <data name="BasicIntegerTestInput" xml:space="preserve">
    <value>int1 = +99
int2 = 42
int3 = 0
int4 = -17</value>
  </data>
  <data name="UnderscoresInIntegersTestInput" xml:space="preserve">
    <value>int5 = 1_000
int6 = 5_349_221
int7 = 53_49_221  # Indian number system grouping
int8 = 1_2_3_4_5  # VALID but discouraged</value>
  </data>
  <data name="BasicFloatTestInput" xml:space="preserve">
    <value># fractional
flt1 = +1.0
flt2 = 3.1415
flt3 = -0.01

# exponent
flt4 = 5e+22
flt5 = 1e06
flt6 = -2E-2

# both
flt7 = 6.626e-34</value>
  </data>
  <data name="FloatWithUnderscoresTestInput" xml:space="preserve">
    <value>flt8 = 224_617.445_991_228</value>
  </data>
  <data name="FloatSpecialsTestInput" xml:space="preserve">
    <value># infinity
sf1 = inf  # positive infinity
sf2 = +inf # positive infinity
sf3 = -inf # negative infinity

# not a number
sf4 = nan  # actual sNaN/qNaN encoding is implementation-specific
sf5 = +nan # same as `nan`
sf6 = -nan # valid, actual encoding is implementation-specific</value>
  </data>
  <data name="BooleanTestInput" xml:space="preserve">
    <value>bool1 = true
bool2 = false</value>
  </data>
  <data name="OffsetDateTimeTestInput" xml:space="preserve">
    <value>odt1 = 1979-05-27T07:32:00Z
odt2 = 1979-05-27T00:32:00-07:00
odt3 = 1979-05-27T00:32:00.999999-07:00
odt4 = 1979-05-27 07:32:00Z</value>
  </data>
  <data name="LocalDateTimeTestInput" xml:space="preserve">
    <value>ldt1 = 1979-05-27T07:32:00
ldt2 = 1979-05-27T00:32:00.999999</value>
  </data>
  <data name="LocalDateTestInput" xml:space="preserve">
    <value>ld1 = 1979-05-27</value>
  </data>
  <data name="LocalTimeTestInput" xml:space="preserve">
    <value>lt1 = 07:32:00
lt2 = 00:32:00.999999</value>
  </data>
  <data name="PrimitiveArraysTestInput" xml:space="preserve">
    <value>integers = [ 1, 2, 3 ]
colors = [ "red", "yellow", "green" ]
string_array = [ "all", 'strings', """are the same""", '''type''' ]</value>
  </data>
  <data name="NestedArraysTestInput" xml:space="preserve">
    <value>nested_arrays_of_ints = [ [ 1, 2 ], [3, 4, 5] ]
nested_mixed_array = [ [ 1, 2 ], ["a", "b", "c"] ]</value>
  </data>
  <data name="ArrayWithTrailingCommaTestInput" xml:space="preserve">
    <value>integers3 = [
  1,
  2, # this is ok
]</value>
  </data>
  <data name="SimpleDottedKeyTestInput" xml:space="preserve">
    <value>name = "Orange"
physical.color = "orange"
physical.shape = "round"</value>
  </data>
  <data name="DottedKeysCanHaveQuotedSubkeysTestInput" xml:space="preserve">
    <value>site."google.com".allowed = true
site."google.com".name = "Google"
site."youtube.com" = false</value>
  </data>
  <data name="DottedKeyWhitespaceTestInput" xml:space="preserve">
    <value>fruit.name = "banana"     # this is best practice
fruit. color = "yellow"    # same as fruit.color
fruit . flavor = "banana"   # same as fruit.flavor</value>
  </data>
  <data name="BasicInlineTableTestInput" xml:space="preserve">
    <value>name = { first = "Tom", last = "Preston-Werner" }
empty = {   }
point = { x = 1, y = 2 }
animal = { type.name = "pug" }</value>
  </data>
  <data name="BasicTableTestInput" xml:space="preserve">
    <value>[table-1]
key1 = "some string"
key2 = 123

[table-2]
key1 = "another string"
key2 = 456</value>
  </data>
  <data name="TableWithQuotedDottedStringTestInput" xml:space="preserve">
    <value>[dog."tater.man"]
type.name = "pug"</value>
  </data>
  <data name="ComplexTableArrayTestInput" xml:space="preserve">
    <value>[[fruits]]
name = "apple"

[fruits.physical]  # subtable
color = "red"
shape = "round"

[fruits.jam] # second subtable
color = "yellow"
feel = "sticky"

[[fruits.varieties]]  # nested array of tables
name = "red delicious"

[[fruits.varieties]]
name = "granny smith"


[[fruits]]
name = "banana"

[fruits.physical.newtonian]
weight = 118 

[fruits.physical]
color = "yellow"

[[fruits.varieties]]
name = "plantain"</value>
  </data>
  <data name="SimpleTableArrayTestInput" xml:space="preserve">
    <value>[[products]]
name = "Hammer"
sku = 738594937

[[products]]  # empty table within the array

[[products]]
name = "Nail"
sku = 284758393

color = "gray"</value>
  </data>
  <data name="SimplePrimitiveDeserializationTestInput" xml:space="preserve">
    <value>MyString = "Hello, world!"
MyFloat = 690.42 # I'm a child.
MyBool = true
MyDateTime = 1970-01-01T07:00:00</value>
  </data>
  <data name="ArrayOfEmptyStringTestInput" xml:space="preserve">
    <value>array =["","","","",""]</value>
  </data>
  <data name="KeyWithEscapedQuotesTestInput" xml:space="preserve">
    <value>"\"a.b\"" = "hello"</value>
  </data>
  <data name="LiteralQuotedPathWithBackslashesTestInput" xml:space="preserve">
    <value>Args = '"C:\\Something"'</value>
  </data>
  <data name="ComplexTestRecordForAttributeMapping" xml:space="preserve">
    <value>string = "Test"
MyWidget = { my_int = 42 }
</value>
  </data>
  <data name="ExampleMailboxConfigurationTestInput" xml:space="preserve">
    <value>mailbox = "whatev@gmail.com"
username = "no"
password = "secret"

[[rules]]
address = "yeet@gmail.com"
blocked = [ "block this pantsgrab" ]
allowed = [ "yeet", "yeet harder" ]

[[rules]]
address = "urmum@gmail.com"
blocked = [ "block this grabpants" ]
allowed = [ "woot", "woot harder" ]</value>
  </data>
  <data name="HexadecimalTestInput" xml:space="preserve">
    <value>key = 0xdeadbeef
key2 = 0x1234567890FD</value>
  </data>
  <data name="StringEscapesTestInput" xml:space="preserve">
    <value>myStupidString = "\b\t\n\f\r\"\\\u0020\U00000020"</value>
  </data>
  <data name="DictionaryAsFieldTestInput" xml:space="preserve">
    <value>[name]
  [name.subname1]
    a = ''
    b = ''
  [name.subname2]
    a = ''
    b = ''</value>
  </data>
  <data name="UserDefinedTypePropertyTestInput" xml:space="preserve">
    <value>Junk = "Whatever"

[A]
IntA = 42
StringA = "Answer"

[B]
IntB = 33
StringB = "LongPlay"

[C]
IntC = 45
StringC = "Single"</value>
  </data>
  <data name="StringEqualsToStringInput" xml:space="preserve">
    <value>str1 = "lorem"
str2 = "ipsum"
str3 = "dolor"
int1 = 1
int2 = 32</value>
  </data>
  <data name="TableIteratorInput" xml:space="preserve">
    <value>[table-1]
dep1 = "0.8.5"
dep2 = "0.8.6"
dep3 = "0.8.7"
dep4 = "0.8.8"</value>
  </data>
</root>